How can you use the staging area to make sure you have one commit per logical change?

-- By using the "git add <filename>". When files have been modified you add them to the staging server and once your logical change has been made you can then commit your change. 

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

-- Brances comes in handy when I would like to create or test something new in my repository without breaking the master branch.

How do the diagrams help you visualize the branch structure?

-- The diagram allows me to see where all the brances split and what commits are reachable and what commits aren't reachable.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

-- Merging two brances compares files and changes within those files and creates one copy with the changes between those files.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

--  Automatic merging saves the user a lot of time when multiple people are working together, merging everything manually could be very painful.
The downside of automatic merging is that it's not perfect. Merging the
    coins branch with the master branch, which included color, resulted in
    inconsistent visuals, where most items were colored but the coins were not.
    Git could even make worse mistakes - for example, if one branch deleted a
    function, and another branch added a call to that function, Git would merge
    those together with no conflict and the resulting code would be broken.
  double check that the code still works after doing a merge.